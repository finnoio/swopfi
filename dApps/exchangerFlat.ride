{-# STDLIB_VERSION 4 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}
let IdTokenA =  getStringValue(this,"assetIdTokenA")
let IdTokenB =  getStringValue(this,"assetIdTokenB")
let IdTokenShare = getStringValue(this,"share_token_id")
let dAppTokensAmountA = getIntegerValue(this, "amountTokenA")
let dAppTokensAmountB = getIntegerValue(this, "amountTokenB")
let tokenShareSupply = getIntegerValue(this,"share_token_supply")
let comission = 0 #comission/comissionScaleDelimiter = 0.00
let comissionScaleDelimiter = 10000
let version = "2.0.0" 
let invariant = getIntegerValue(this,"invariant")
let scaleValue8 = 100000000
let scaleValue8Digits = 8
let scaleValue12 = 1000000000000
let ratioThresholdMax = 100000000
let ratioThresholdMin = 99999000
let alpha = 50 #model coef alpha = 0.15 
let alphaDigits = 2
let beta = 46 #model coef alpha = 0.15 
let betaDigits = 2


func assetId (asset: String) ={
    if asset == "WAVES" then unit else asset.fromBase58String()
}

let assetIdTokenA = assetId(IdTokenA)
let assetIdTokenB =  assetId(IdTokenB)
let assetIdTokenShare = IdTokenShare.fromBase58String()

# skeweness =  0.5*(x/y+y/x) 
# each fraction multiple by scaleValue in order to avoid zeroing
# during working on this fraction scaleValue8 was switched to scaleValue12. to unscale back to 8 digits added /10000
func skeweness (x: Int,y:Int) = {(fraction(scaleValue12,x,y)+fraction(scaleValue12,y,x))/2/10000}

# (x+y)*skeweness^(-alpha) + 2*(x*y)*(skeweness-beta)^alpha
func invariantCalc (x: Int,y:Int) = {
    let sk = skeweness(x,y)
    fraction(x+y,pow(sk+1,scaleValue8Digits,-alpha,alphaDigits,8,HALFDOWN),scaleValue8)+2*fraction(fraction(pow(x,0,5,1,scaleValue8Digits,HALFDOWN),pow(y,0,5,1,scaleValue8Digits,HALFDOWN),scaleValue8*scaleValue8),pow(sk - beta*scaleValue8/100,0,alpha,alphaDigits,scaleValue8Digits,HALFDOWN),scaleValue12)
    # IMPORTANT: in case with alpha = 0.5 its possible to improve accuracy by replace this 
    # ...pow(sk - beta*scaleValue8/100,scaleValue8Digits,alpha,alphaDigits,scaleValue8Digits,HALFDOWN),scaleValue8...
    # to
    #  ...pow(sk - beta*scaleValue8/100,0,alpha,alphaDigits,scaleValue8Digits,HALFDOWN),scaleValue12...
    # we save 4 digit info. 
    # Universal function below
    # fraction(x+y,pow(sk,scaleValue8Digits,-alpha,alphaDigits,8,HALFDOWN),scaleValue8)+2*fraction(fraction(pow(x,0,5,1,scaleValue8Digits,HALFDOWN),pow(y,0,5,1,scaleValue8Digits,HALFDOWN),scaleValue8*scaleValue8),pow(sk - beta*scaleValue8/100,0,alpha,alphaDigits,scaleValue8Digits,HALFDOWN),scaleValue12)
    # fraction(x+y,pow(sk,scaleValue8Digits,-alpha,alphaDigits,8,HALFDOWN),scaleValue8)+2*fraction(fraction(pow(x,0,5,1,scaleValue8Digits,HALFDOWN),pow(y,0,5,1,scaleValue8Digits,HALFDOWN),scaleValue8*scaleValue8),pow(sk - beta*scaleValue8/100,scaleValue8Digits,alpha,alphaDigits,scaleValue8Digits,HALFDOWN),scaleValue8)
}


func calculateHowManySendTokenA(amountToSendEstimated: Int, minTokenRecieveAmount: Int, amountTokenA: Int,amountTokenB: Int, tokenReceiveAmount: Int ) ={
    let slippageValue = scaleValue8 - scaleValue8*1/10000000 # 0.0001% of slippage
    let invariantEstimatedRatio = fraction(invariant,scaleValue8,invariantCalc(amountTokenA-amountToSendEstimated,amountTokenB + tokenReceiveAmount))
    if invariantEstimatedRatio > slippageValue && invariantEstimatedRatio < scaleValue8 then
        amountToSendEstimated*(comissionScaleDelimiter-comission)/comissionScaleDelimiter
    else 
        # let deltaBetweenMaxAndMinSendValue = amountToSendEstimated-minTokenRecieveAmount
        # let amountToSendStep1 = amountToSendEstimated - 1*deltaBetweenMaxAndMinSendValue/5
        # let amountToSendStep2 = amountToSendEstimated - 2*deltaBetweenMaxAndMinSendValue/5
        # let amountToSendStep3 = amountToSendEstimated - 3*deltaBetweenMaxAndMinSendValue/5
        # let amountToSendStep4 = amountToSendEstimated - 4*deltaBetweenMaxAndMinSendValue/5
        # let amountToSendStep5 = amountToSendEstimated - 5*deltaBetweenMaxAndMinSendValue/5
        # #before start check last condition. If it wrong we can stop
        # if invariantCalc(amountTokenA-amountToSendStep5,amountTokenB + tokenReceiveAmount)-invariant < 0 then throw("price has changed dramatically. err1") else

        # if invariantCalc(amountTokenA-amountToSendStep1,amountTokenB + tokenReceiveAmount)-invariant > 0 then 
        #     amountToSendStep1*(comissionScaleDelimiter-comission)/comissionScaleDelimiter
        # else if invariantCalc(amountTokenA-amountToSendStep2,amountTokenB + tokenReceiveAmount)-invariant > 0 then 
        #     amountToSendStep2*(comissionScaleDelimiter-comission)/comissionScaleDelimiter
        # else if invariantCalc(amountTokenA-amountToSendStep3,amountTokenB + tokenReceiveAmount)-invariant > 0 then 
        #     amountToSendStep3*(comissionScaleDelimiter-comission)/comissionScaleDelimiter
        # else if invariantCalc(amountTokenA-amountToSendStep4,amountTokenB + tokenReceiveAmount)-invariant > 0 then 
        #     amountToSendStep4*(comissionScaleDelimiter-comission)/comissionScaleDelimiter
        # else if invariantCalc(amountTokenA-amountToSendStep5,amountTokenB + tokenReceiveAmount)-invariant > 0 then 
        #     amountToSendStep5*(comissionScaleDelimiter-comission)/comissionScaleDelimiter
        # else 
            throw("price has changed dramatically. err2")    
}

func calculateHowManySendTokenB(amountToSendEstimated: Int, minTokenRecieveAmount: Int, amountTokenA: Int,amountTokenB: Int, tokenReceiveAmount: Int ) ={
    let slippageValue = scaleValue8 - scaleValue8*1/10000000 # 0.01% of slippage by default
    let invariantEstimatedRatio = fraction(invariant,scaleValue8,invariantCalc(amountTokenA+tokenReceiveAmount,amountTokenB - amountToSendEstimated))
    # if true then throw(toString(invariantCalc(amountTokenA + tokenReceiveAmount, amountTokenB-amountToSendEstimated)) + " " 
    #             +  toString(invariantCalc(500000000000, 500000000000)) + " " 
    #             + toString(amountTokenA+tokenReceiveAmount) + " " 
    #             + toString(amountTokenB - amountToSendEstimated) + " " 
    #             )  else
    if invariantEstimatedRatio > slippageValue && invariantEstimatedRatio < scaleValue8 then
        amountToSendEstimated*(comissionScaleDelimiter-comission)/comissionScaleDelimiter
    else 

        # let deltaBetweenMaxAndMinSendValue = amountToSendEstimated-minTokenRecieveAmount
        # let amountToSendStep1 = amountToSendEstimated - 1*deltaBetweenMaxAndMinSendValue/5
        # let amountToSendStep2 = amountToSendEstimated - 2*deltaBetweenMaxAndMinSendValue/5
        # let amountToSendStep3 = amountToSendEstimated - 3*deltaBetweenMaxAndMinSendValue/5
        # let amountToSendStep4 = amountToSendEstimated - 4*deltaBetweenMaxAndMinSendValue/5
        # let amountToSendStep5 = amountToSendEstimated - 5*deltaBetweenMaxAndMinSendValue/5
        # #before start check last condition. If it wrong we can stop
        # if invariantCalc(amountTokenA+tokenReceiveAmount,amountTokenB - amountToSendStep5)-invariant < 0 then throw("price has changed dramatically. err1") else

        # if invariantCalc(amountTokenA+tokenReceiveAmount,amountTokenB - amountToSendStep1)-invariant > 0 then 
        #     amountToSendStep1*(comissionScaleDelimiter-comission)/comissionScaleDelimiter
        # else if invariantCalc(amountTokenA+tokenReceiveAmount,amountTokenB - amountToSendStep2)-invariant > 0 then 
        #     amountToSendStep2*(comissionScaleDelimiter-comission)/comissionScaleDelimiter
        # else if invariantCalc(amountTokenA+tokenReceiveAmount,amountTokenB - amountToSendStep3)-invariant > 0 then 
        #     amountToSendStep3*(comissionScaleDelimiter-comission)/comissionScaleDelimiter
        # else if invariantCalc(amountTokenA+tokenReceiveAmount,amountTokenB - amountToSendStep4)-invariant > 0 then 
        #     amountToSendStep4*(comissionScaleDelimiter-comission)/comissionScaleDelimiter
        # else if invariantCalc(amountTokenA+tokenReceiveAmount,amountTokenB - amountToSendStep5)-invariant > 0 then 
        #     amountToSendStep5*(comissionScaleDelimiter-comission)/comissionScaleDelimiter
        # else 
        throw("price has changed dramatically. err2")    
}



@Callable(contextObj)
func fund() =   {
    let paymentA = value(contextObj.payments[0])
    let paymentB = value(contextObj.payments[1])
    let assetIdReceivedA = paymentA.assetId
    let tokenReceiveAmountA = paymentA.amount
    let assetIdReceivedB = paymentB.assetId
    let tokenReceiveAmountB = paymentB.amount
    let  digitTokenA = match(assetIdReceivedA) {  
            case p:Unit=> 8
            case p:ByteVector => value(assetInfo(p)).decimals
        }
    let  digitTokenB = match(assetIdReceivedB) {  
            case p:Unit=> 8
            case p:ByteVector => value(assetInfo(p)).decimals
        }
    if (isDefined(getBoolean(this, "status"))) then
            throw("already active")
    else{

        let shareTokenName = "ShareT_" + takeRight(toString(this),5)
        # we save 16 digit info with using scaleValue8Digits in pow functions. We divide /scaleValue8 to delete 8 digits and another 8 digits we define as digits in shareToken in Issue tx
        let digitsInShareToken = (digitTokenA+digitTokenB)/2
        # we save 16 digit info with using scaleValue8Digits in pow functions. We divide /scaleValue8 to delete 8 digits and another 8 digits we define as digits in shareToken in Issue tx
        
        let shareTokenInitialAmount =  fraction(pow(tokenReceiveAmountA,digitTokenA,5,1,digitTokenA,HALFDOWN),pow(tokenReceiveAmountB,digitTokenB,5,1,digitTokenB,HALFDOWN),pow(10,0,digitsInShareToken,0,0,HALFDOWN))
        let shareTokenAssetId = calculateAssetId(Issue(shareTokenName,shareTokenName,shareTokenInitialAmount,digitsInShareToken,true))
        let assetIdTokenStringA = match (assetIdReceivedA) {
            case t:Unit => "WAVES" 
            case t:ByteVector => toBase58String(value(assetIdReceivedA))
          }
        let assetIdTokenStringB = match(assetIdReceivedB) {
            case t:Unit => "WAVES" 
            case t:ByteVector => toBase58String(value(assetIdReceivedB))
          }

        let invariantCalcualated = invariantCalc(tokenReceiveAmountA,tokenReceiveAmountB)  
        #if true then throw(toString(invariantCalcualated)) else
        [
            IntegerEntry("amountTokenA", tokenReceiveAmountA ),
            IntegerEntry("amountTokenB", tokenReceiveAmountB ),
            StringEntry("assetIdTokenA", assetIdTokenStringA),
            StringEntry("assetIdTokenB", assetIdTokenStringB),
            IntegerEntry("invariant", invariantCalcualated),
            IntegerEntry("exchange_count", 0),
            BooleanEntry("status", true),
            IntegerEntry("comission",comission),
            IntegerEntry("comissionScaleDelimiter",comissionScaleDelimiter),
            StringEntry("version", version),
            Issue(shareTokenName,shareTokenName,shareTokenInitialAmount,digitsInShareToken,true),
            ScriptTransfer(contextObj.caller, shareTokenInitialAmount, shareTokenAssetId),
            StringEntry("share_token_id", toBase58String(shareTokenAssetId)),
            IntegerEntry("share_token_supply", shareTokenInitialAmount)
        ]
    } 
}

#if someone ready to replenish in both tokens. It's necessary to bring tokens amount in proportion according to dApp state
@Callable(contextObj)
func replenishmentWithTwoToken() = {
    let paymentA = value(contextObj.payments[0])
    let paymentB = value(contextObj.payments[1])
    let assetIdReceivedA = paymentA.assetId
    let tokenReceiveAmountA = paymentA.amount
    let assetIdReceivedB = paymentB.assetId
    let tokenReceiveAmountB = paymentB.amount
    let invariantCalcualated = invariantCalc(dAppTokensAmountA + tokenReceiveAmountA, dAppTokensAmountB + tokenReceiveAmountB)    
    if (assetIdReceivedA != assetIdTokenA || assetIdReceivedB != assetIdTokenB ) then throw("incorrect assets") else
    # fraction should be equal 1(multiple by 1000) if depositor replanish with proporion according to actual price
    let tokenRatio = fraction(tokenReceiveAmountA,scaleValue8,dAppTokensAmountA)/fraction(dAppTokensAmountB,1,tokenReceiveAmountB)
    # 1 percent differnce is acceptable
    if  !(tokenRatio == scaleValue8 ) then throw("incorrect assets amount: amounts must have the same ratio as contract") else 
    let shareTokenToPayAmount = fraction(tokenReceiveAmountA,tokenShareSupply,dAppTokensAmountA)
    if ( shareTokenToPayAmount == 0 ) then throw("you try replansish with very small amount") else 
    [
        Reissue(assetIdTokenShare,shareTokenToPayAmount,true),
        ScriptTransfer(contextObj.caller, shareTokenToPayAmount, assetIdTokenShare),
        IntegerEntry("share_token_supply", tokenShareSupply + shareTokenToPayAmount),
        IntegerEntry("amountTokenA", dAppTokensAmountA + tokenReceiveAmountA),
        IntegerEntry("amountTokenB", dAppTokensAmountB + tokenReceiveAmountB),
        IntegerEntry("invariant", invariantCalcualated)
    ]
}

#if someone ready to replenish in one tokens
@Callable(contextObj)
func replanishmentWithOneToken(tokenAamountWithOldInvariantNewPrice :Int,tokenBamountWithOldInvariantNewPrice :Int) =   {
    let payment = value(contextObj.payments[0])
    let assetIdReceived = payment.assetId
    let tokenReceiveAmount = payment.amount
    if(assetIdReceived == assetIdTokenA) then (
        let newAmountTokenA =  dAppTokensAmountA + tokenReceiveAmount
        let newInvariant = invariantCalc(newAmountTokenA,dAppTokensAmountB)
        #check input args for price correctness
        let priceAtoBwith8digits = fraction(newAmountTokenA,scaleValue8,dAppTokensAmountB)
        let isCorrectPriceRation = fraction(tokenBamountWithOldInvariantNewPrice,priceAtoBwith8digits,tokenAamountWithOldInvariantNewPrice)
        if isCorrectPriceRation > ratioThresholdMax ||  isCorrectPriceRation < ratioThresholdMin then throw("incorrect function args: price") else
        #check input args for invariant correctness
        let calculatedInvariantWithNewPrice = invariantCalc(tokenAamountWithOldInvariantNewPrice,tokenBamountWithOldInvariantNewPrice)
        let isCorrectInvariantRation = fraction(calculatedInvariantWithNewPrice,scaleValue8,invariant)
        if isCorrectInvariantRation > ratioThresholdMax ||  isCorrectInvariantRation < ratioThresholdMin then throw("incorrect function args: invariant") else
        let newTokenShareSupply = fraction(tokenBamountWithOldInvariantNewPrice,tokenShareSupply,dAppTokensAmountB)
        let shareTokenToPayAmount = newTokenShareSupply-tokenShareSupply
        [
        Reissue(assetIdTokenShare,shareTokenToPayAmount,true),
        ScriptTransfer(contextObj.caller, shareTokenToPayAmount, assetIdTokenShare),
        IntegerEntry("share_token_supply", tokenShareSupply + shareTokenToPayAmount),
        IntegerEntry("amountTokenA", newAmountTokenA),
        IntegerEntry("invariant", newInvariant)
        ]
    )
    else if (assetIdReceived == assetIdTokenB) then (
        let newAmountTokenB =  dAppTokensAmountB + tokenReceiveAmount
        let newInvariant = invariantCalc(dAppTokensAmountA,newAmountTokenB)
        #check input args for price correctness
        let priceAtoBwith8digits = fraction(dAppTokensAmountA,scaleValue8,newAmountTokenB)
        let isCorrectPriceRation = fraction(tokenBamountWithOldInvariantNewPrice,priceAtoBwith8digits,tokenAamountWithOldInvariantNewPrice)
        if isCorrectPriceRation > ratioThresholdMax ||  isCorrectPriceRation < ratioThresholdMin then throw("incorrect function args: price") else
        #check input args for invariant correctness
        let calculatedInvariantWithNewPrice = invariantCalc(tokenAamountWithOldInvariantNewPrice,tokenBamountWithOldInvariantNewPrice)
        let isCorrectInvariantRation = fraction(calculatedInvariantWithNewPrice,scaleValue8,invariant)
        if isCorrectInvariantRation > ratioThresholdMax ||  isCorrectInvariantRation < ratioThresholdMin then throw("incorrect function args: invariant") else
        let newTokenShareSupply = fraction(tokenBamountWithOldInvariantNewPrice,tokenShareSupply,dAppTokensAmountB)
        let shareTokenToPayAmount = newTokenShareSupply-tokenShareSupply
        [
        Reissue(assetIdTokenShare,shareTokenToPayAmount,true),
        ScriptTransfer(contextObj.caller, shareTokenToPayAmount, assetIdTokenShare),
        IntegerEntry("share_token_supply", tokenShareSupply + shareTokenToPayAmount),
        IntegerEntry("amountTokenB", newAmountTokenB),
        IntegerEntry("invariant", newInvariant)
        ]
    )
    else throw("incorrect assets in payment")  
}

@Callable(contextObj)
func withdraw() =   {

    let payment = value(contextObj.payments[0])
    let assetIdReceived = payment.assetId
    let tokenReceiveAmount = payment.amount
    let tokensToPayA = fraction(tokenReceiveAmount,dAppTokensAmountA,tokenShareSupply)
    let tokensToPayB = fraction(tokenReceiveAmount,dAppTokensAmountB,tokenShareSupply)
    let invariantCalcualated = invariantCalc(dAppTokensAmountA - tokensToPayA, dAppTokensAmountB - tokensToPayB)    

    [      
        IntegerEntry("amountTokenA", dAppTokensAmountA - tokensToPayA),
        IntegerEntry("amountTokenB", dAppTokensAmountB - tokensToPayB),
        IntegerEntry("share_token_supply", tokenShareSupply - tokenReceiveAmount),
        ScriptTransfer(contextObj.caller, tokensToPayA, assetIdTokenA),
        ScriptTransfer(contextObj.caller, tokensToPayB, assetIdTokenB),
        Burn(assetIdTokenShare,tokenReceiveAmount),
        IntegerEntry("invariant", invariantCalcualated)

    ]
}
@Callable(contextObj)
func exchanger( amountToSendEstimated: Int, minTokenRecieveAmount: Int ) = {
    let amountTokenB = getIntegerValue(this, "amountTokenB")
    let amountTokenA = getIntegerValue(this, "amountTokenA")
    let payment = value(contextObj.payments[0])
    let assetIdReceived = payment.assetId
    let tokenReceiveAmount = payment.amount
    let count = match(getInteger(this, "exchange_count")){
        case i: Int =>  value(getInteger(this, "exchange_count")) + i 
        case _=> 0
    }

    if(assetIdReceived == assetIdTokenB)
        then
        (
            let tokenSendAmount = calculateHowManySendTokenA(amountToSendEstimated, minTokenRecieveAmount, amountTokenA,amountTokenB, tokenReceiveAmount)
            let assetIdSent = assetIdTokenA
            # successful execution result is updating information about actual balance and supply into the state and transfer tokens to the caller
            [
                IntegerEntry("amountTokenA", amountTokenA -  tokenSendAmount ),
                IntegerEntry("amountTokenB",  amountTokenB + tokenReceiveAmount),
                IntegerEntry("exchange_count",  count + 1),
                IntegerEntry("invariant", invariantCalc( amountTokenA -  tokenSendAmount,amountTokenB + tokenReceiveAmount)),
                ScriptTransfer(contextObj.caller, tokenSendAmount, assetIdSent)
            ]
        )
    else ( if (assetIdReceived == assetIdTokenA)
        then
            (
            # if true then throw(toString(fraction(invariant,10000,invariantCalc(amountTokenA + AmountToGetEstimated,amountTokenB - tokenReceiveAmount)))) else
            let tokenSendAmount = calculateHowManySendTokenB(amountToSendEstimated, minTokenRecieveAmount, amountTokenA,amountTokenB, tokenReceiveAmount)
            let assetIdSent = assetIdTokenB
            # successful execution result is updating information about actual balance and supply into the state and transfer tokens to the caller
            [
            IntegerEntry("amountTokenA", amountTokenA + tokenReceiveAmount),
            IntegerEntry("amountTokenB", amountTokenB - tokenSendAmount),
            IntegerEntry("exchange_count",  count + 1),
            IntegerEntry("invariant", invariantCalc(amountTokenA + tokenReceiveAmount, amountTokenB - tokenSendAmount)),
            ScriptTransfer(contextObj.caller, tokenSendAmount, assetIdSent)
            ]   
        )
    else throw("Asset is not allowed"))
}