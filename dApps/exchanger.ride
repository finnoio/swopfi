{-# STDLIB_VERSION 4 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}
let IdTokenA =  getStringValue(this,"assetIdTokenA")
let IdTokenB =  getStringValue(this,"assetIdTokenB")
let amountTokenB = getIntegerValue(this, "amountTokenB")
let amountTokenA = getIntegerValue(this, "amountTokenA")
let assetIdTokenShare = getBinaryValue(this,"share_token_id")
let tokenShareSupply = getIntegerValue(this,"share_token_supply")
let comission = 500 #comission/comissionScaleDelimiter = 0.0005 = 0.05%
let comissionScaleDelimiter = 1000000
let version = "1.0.0" 
let scaleValue8 = 100000000
let ratioThresholdMax = 100000000
let ratioThresholdMin = 99999000
let scaleValue8Digits = 8
func assetId (asset: String) ={
    if asset == "WAVES" then unit else asset.fromBase58String()
}

let assetIdTokenA = assetId(IdTokenA)
let assetIdTokenB =  assetId(IdTokenB)



@Callable(contextObj)
func fund() = {
    let paymentA = value(contextObj.payments[0])
    let paymentB = value(contextObj.payments[1])
    let assetIdReceivedA = paymentA.assetId
    let tokenReceiveAmountA = paymentA.amount
    let assetIdReceivedB = paymentB.assetId
    let tokenReceiveAmountB = paymentB.amount
    let  digitTokenA = match(assetIdReceivedA) {  
            case p:Unit=> 8
            case p:ByteVector => value(assetInfo(p)).decimals
        }
    let  digitTokenB = match(assetIdReceivedB) {  
            case p:Unit=> 8
            case p:ByteVector => value(assetInfo(p)).decimals
        }
    if (isDefined(getBoolean(this, "status"))) then
            throw("already active")
    else{    
        let shareTokenName = "ShareT_" + takeRight(toString(this),5)
        let digitsInShareToken = (digitTokenA+digitTokenB)/2
        # we save 16 digit info with using scaleValue8Digits in pow functions. We divide /scaleValue8 to delete 8 digits and another 8 digits we define as digits in shareToken in Issue tx
        let shareTokenInitialAmount =  fraction(pow(tokenReceiveAmountA,digitTokenA,5,1,digitTokenA,HALFDOWN),pow(tokenReceiveAmountB,digitTokenB,5,1,digitTokenB,HALFDOWN),pow(10,0,digitsInShareToken,0,0,HALFDOWN))
        let shareTokenAssetId = calculateAssetId(Issue(shareTokenName,shareTokenName,shareTokenInitialAmount,digitsInShareToken,true))
        let assetIdTokenStringA = match (assetIdReceivedA) {
            case t:Unit => "WAVES" 
            case t:ByteVector => toBase58String(value(assetIdReceivedA))
          }
        let assetIdTokenStringB = match(assetIdReceivedB) {
            case t:Unit => "WAVES" 
            case t:ByteVector => toBase58String(value(assetIdReceivedB))
          }          
        [
            IntegerEntry("amountTokenA", tokenReceiveAmountA ),
            IntegerEntry("amountTokenB", tokenReceiveAmountB ),
            StringEntry("assetIdTokenA", assetIdTokenStringA),
            StringEntry("assetIdTokenB", assetIdTokenStringB),
            IntegerEntry("exchange_count", 0),
            BooleanEntry("status", true),
            IntegerEntry("comission",comission),
            IntegerEntry("comissionScaleDelimiter",comissionScaleDelimiter),
            StringEntry("version", version),
            Issue(shareTokenName,shareTokenName,shareTokenInitialAmount,digitsInShareToken,true),
            ScriptTransfer(contextObj.caller, shareTokenInitialAmount, shareTokenAssetId),
            BinaryEntry("share_token_id", shareTokenAssetId),
            IntegerEntry("share_token_supply", shareTokenInitialAmount)
        ]
    } 
}

@Callable(contextObj)
func replenishment() = {
    let paymentA = value(contextObj.payments[0])
    let paymentB = value(contextObj.payments[1])
    let assetIdReceivedA = paymentA.assetId
    let tokenReceiveAmountA = paymentA.amount
    let assetIdReceivedB = paymentB.assetId
    let tokenReceiveAmountB = paymentB.amount
    let dAppTokensAmountA = getIntegerValue(this, "amountTokenA")
    let dAppTokensAmountB = getIntegerValue(this, "amountTokenB")
    if (assetIdReceivedA != assetIdTokenA || assetIdReceivedB != assetIdTokenB ) then throw("incorrect assets") else
    # fraction should be equal 1(multiple by 1000) if depositor replanish with proporion according to actual price
    let tokenRatio = fraction(tokenReceiveAmountA,1000000000000*100000,dAppTokensAmountA)/fraction(dAppTokensAmountB,1000000000000,tokenReceiveAmountB)
    # 1 percent differnce is acceptable
    if ( !(tokenRatio > 99990 && tokenRatio < 100010) ) then throw("incorrect assets amount") else 
    let shareTokenToPayAmount = fraction(tokenReceiveAmountA,tokenShareSupply,dAppTokensAmountA)
    if ( shareTokenToPayAmount == 0 ) then throw("you try replansish with very small amount") else 
    [
        Reissue(assetIdTokenShare,shareTokenToPayAmount,true),
        ScriptTransfer(contextObj.caller, shareTokenToPayAmount, assetIdTokenShare),
        IntegerEntry("share_token_supply", tokenShareSupply + shareTokenToPayAmount),
        IntegerEntry("amountTokenA", dAppTokensAmountA + tokenReceiveAmountA),
        IntegerEntry("amountTokenB", dAppTokensAmountB + tokenReceiveAmountB)
    ]
}

#if someone ready to replenish in one tokens
@Callable(contextObj)
func replanishmentWithOneToken() =   {
    let payment = value(contextObj.payments[0])
    let assetIdReceived = payment.assetId
    let tokenReceiveAmount = payment.amount
    if(assetIdReceived == assetIdTokenA) then (
        let newAmountTokenA =  amountTokenA + tokenReceiveAmount
        let priceAtoBwith8digits = fraction(newAmountTokenA,scaleValue8,amountTokenB)
        #sqrt(invariant_old/price_new) = sqrt(x_old/price_new)* sqrt(y_old/price_new)
        let tokenAmountBNewPriceOldInvariant = pow(fraction(amountTokenA,amountTokenB,priceAtoBwith8digits),0,5,1,0,HALFDOWN)
        let newTokenShareSupply = fraction(amountTokenB,tokenShareSupply,tokenAmountBNewPriceOldInvariant)
        let shareTokenToPayAmount = newTokenShareSupply-tokenShareSupply
        [
        Reissue(assetIdTokenShare,shareTokenToPayAmount,true),
        ScriptTransfer(contextObj.caller, shareTokenToPayAmount, assetIdTokenShare),
        IntegerEntry("share_token_supply", tokenShareSupply + shareTokenToPayAmount),
        IntegerEntry("amountTokenA", newAmountTokenA)
        ]
    )
    else if (assetIdReceived == assetIdTokenB) then (
        let newAmountTokenB =  amountTokenB + tokenReceiveAmount
        let priceAtoBwith8digits = fraction(amountTokenA,scaleValue8,newAmountTokenB)
        #sqrt(invariant_old/price_new) = sqrt(x_old/price_new)* sqrt(y_old/price_new)
        let tokenAmountBNewPriceOldInvariant = pow(fraction(amountTokenA,amountTokenB,priceAtoBwith8digits),0,5,1,0,HALFDOWN)
        let newTokenShareSupply = fraction(amountTokenB,tokenShareSupply,tokenAmountBNewPriceOldInvariant)
        let shareTokenToPayAmount = newTokenShareSupply-tokenShareSupply
        [
        Reissue(assetIdTokenShare,shareTokenToPayAmount,true),
        ScriptTransfer(contextObj.caller, shareTokenToPayAmount, assetIdTokenShare),
        IntegerEntry("share_token_supply", tokenShareSupply + shareTokenToPayAmount),
        IntegerEntry("amountTokenB", newAmountTokenB)
        ]
    )
    else throw("incorrect assets in payment")  
}

@Callable(contextObj)
func withdraw() =   {
    let dAppTokensAmountA = getIntegerValue(this, "amountTokenA")
    let dAppTokensAmountB = getIntegerValue(this, "amountTokenB")
    let payment = value(contextObj.payments[0])
    let assetIdReceived = payment.assetId
    let tokenReceiveAmount = payment.amount
    if assetIdTokenShare !=  assetIdReceived then throw("you need to attach share token for this dApp " + toBase58String(assetIdTokenShare)) else
    let tokensToPayA = fraction(tokenReceiveAmount,dAppTokensAmountA,tokenShareSupply)
    let tokensToPayB = fraction(tokenReceiveAmount,dAppTokensAmountB,tokenShareSupply)
    [      
        ScriptTransfer(contextObj.caller, tokensToPayA, assetIdTokenA),
        ScriptTransfer(contextObj.caller, tokensToPayB, assetIdTokenB),
        IntegerEntry("amountTokenA", dAppTokensAmountA - tokensToPayA),
        IntegerEntry("amountTokenB", dAppTokensAmountB - tokensToPayB),
        IntegerEntry("share_token_supply", tokenShareSupply - tokenReceiveAmount),
        Burn(assetIdTokenShare,tokenReceiveAmount)
    ]
}
@Callable(contextObj)
func exchanger( minTokenRecieve: Int) = {
    #if(comission < 0 || comission >1000) then(throw("incorrect comission value")) else
    let payment = value(contextObj.payments[0])
    let assetIdReceived = payment.assetId
    let tokenReceiveAmount = payment.amount
    let count =  value(getInteger(this, "exchange_count"))
    if(assetIdReceived == assetIdTokenB)
        then
        (
            #let tokenSendAmount =  (AmountTokenA*scale - fraction(amountTokenB,scale*AmountTokenA,tokenReceiveAmount + amountTokenB))/scale
            let tokenSendAmount =  fraction(amountTokenA,tokenReceiveAmount,tokenReceiveAmount + amountTokenB)*(comissionScaleDelimiter-comission)/comissionScaleDelimiter
            if(tokenSendAmount < minTokenRecieve) then(throw("Price has changed dramaticaly. Receiving token amount don't satisfy specified price level")) else
            let assetIdSent = assetIdTokenA
            # successful execution result is updating information about actual balance and supply into the state and transfer tokens to the caller
            [
                IntegerEntry("amountTokenA", amountTokenA -  tokenSendAmount ),
                IntegerEntry("amountTokenB",  amountTokenB + tokenReceiveAmount),
                IntegerEntry("exchange_count",  count + 1),
                ScriptTransfer(contextObj.caller, tokenSendAmount, assetIdSent)
            ]
        )
    else ( if (assetIdReceived == assetIdTokenA)
        then
            (
            let tokenSendAmount =  (fraction(amountTokenB,tokenReceiveAmount,tokenReceiveAmount + amountTokenA)*(comissionScaleDelimiter-comission))/comissionScaleDelimiter
            if(tokenSendAmount < minTokenRecieve) then(throw("Price has changed dramaticaly. Receiving token amount don't satisfy specified price level")) else
            let assetIdSent = assetIdTokenB
            # successful execution result is updating information about actual balance and supply into the state and transfer tokens to the caller
            [
            IntegerEntry("amountTokenA", amountTokenA + tokenReceiveAmount),
            IntegerEntry("amountTokenB", amountTokenB - tokenSendAmount),
            IntegerEntry("exchange_count",  count + 1),
            ScriptTransfer(contextObj.caller, tokenSendAmount, assetIdSent)
            ]   
        )
    else throw("Asset is not allowed"))
}