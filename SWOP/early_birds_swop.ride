{-# STDLIB_VERSION 4 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let adminPubKey1 = base58'7FhFLst7Htn4uYxGH7xYMTAmbydLVoiZef3eFghi7CG4'
let adminPubKey2 = base58'7FhFLst7Htn4uYxGH7xYMTAmbydLVoiZef3eFghi7CG4'
let adminPubKey3 = base58'7FhFLst7Htn4uYxGH7xYMTAmbydLVoiZef3eFghi7CG4'
let adminPubKeyStartStop = base58'7FhFLst7Htn4uYxGH7xYMTAmbydLVoiZef3eFghi7CG4'
let adminPubKeyStaking = base58'7FhFLst7Htn4uYxGH7xYMTAmbydLVoiZef3eFghi7CG4' 


let keyActivateHeight = "activate_height"
let keyFinishHeight = "finish_height"
let activateHight = this.getIntegerValue(keyActivateHeight)
let finishHight = this.getIntegerValue(keyFinishHeight)
let totalShareSWOP = 100000000000000 # 1m with 8 digits
let SWOP = base58'DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p'

func throwOnlyAdmin() = throw("Only admin can call this function")
func throwIsActive() = throw("DApp is already active")

func getCallerShare(caller:Address) = {
    let callerShare = this.getInteger("share_" + caller.toString())
    let callerShareAmount = match callerShare {
        case share: Int => share
        case share: Unit => throw("Only early liquidity providers can call this function")
    }
    callerShareAmount
} 

func getWithdrawnAmount(caller:Address) ={
    let callerWithdrawn = this.getInteger("withdrawn_" + caller.toString())
    let callerWithdrawnAmount = match callerWithdrawn {
        case share: Int => share
        case share: Unit => 0
    }
    callerWithdrawnAmount  
}

@Callable(i)
func init() = { 
    let blockDuration = finishHight - activateHight 
    if ![adminPubKey1, adminPubKey2, adminPubKey3, adminPubKeyStaking].containsElement(i.callerPublicKey) then
        throwOnlyAdmin() 
    else if this.getBoolean(keyActivateHeight).isDefined() then
        throwIsActive()
    else
    [
        IntegerEntry(keyActivateHeight, height),
        IntegerEntry(keyFinishHeight, height+blockDuration)
    ]
}

@Callable(i)
func claimSWOP() = {
    let blockDuration = finishHight - activateHight 
    let currentDuration  = if height < finishHight then height else finishHight
    let callerShare = getCallerShare(i.caller)
    let callerWithdrawnAmount = getWithdrawnAmount(i.caller) # already withdrawn amount
    let claimAmount = (height-activateHight).fraction(callerShare,blockDuration) - callerWithdrawnAmount
    [
        IntegerEntry("withdrawn_" + i.caller.toString(), callerWithdrawnAmount + claimAmount),
        ScriptTransfer(i.caller, claimAmount, SWOP)
    ]
}

@Verifier(tx)
func verify() = {
        let adminPubKey1Signed = if sigVerify(tx.bodyBytes, tx.proofs[0], adminPubKey1) then 1 else 0
        let adminPubKey2Signed = if sigVerify(tx.bodyBytes, tx.proofs[1], adminPubKey2) then 1 else 0
        let adminPubKey3Signed = if sigVerify(tx.bodyBytes, tx.proofs[2], adminPubKey3) then 1 else 0
        adminPubKey1Signed + adminPubKey2Signed + adminPubKey3Signed >= 2
}
